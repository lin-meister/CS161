HW 6
Chaoran Lin

1. 
(a) {x / A, y / B, z / B} 
(b) does not exist
(c) {x / B,  y / A}
(d) {y / John, x / John}
(e) does not exist

2.

(a) 

John likes all kinds of food:
    A(x) (Food(x) => Likes(John, x))

Apples are food:
    A(x) (Apple(x) => Food(x))

Chicken is food:
    A(x) (Chicken(x) => Food(x))

Anything anyone eats and isn't killed by is food:
    A(y) E(x) ((Eats(x, y) & ~Kills(y, x)) => Food(y))

If you are killed by something, you are not alive:
    A(y) E(x) (Kills(x, y) => ~Alive(y))

Bill eats peanuts and is still alive:
    (Eats(Bill, peanuts) & Alive(Bill))

Sue eats everything Bill eats:
    A(x) (Eats(Bill, x) => Eats(Sue, x))

(b)

John likes all kinds of food:
    ~Food(x) | Likes(John, x)

Apples are food:
    ~Apple(x) | Food(x)

Chicken is food:
    ~Chicken(x) | Food(x)

Anything anyone eats and isn't killed by is food:
    ~(Eats(F(y), y) & ~Kills(y, F(y))) | Food(y)
    ~Eats(F(y), y) | Kills(y, F(y)) | Food(y)

If you are killed by something, you are not alive:
    ~Kills(F(y), y) | ~Alive(y)

Bill eats peanuts and is still alive:
    Eats(Bill, peanuts) & Alive(Bill)

Sue eats everything Bill eats:
    ~Eats(Bill, x) | Eats(Sue, x)

(c)

Prove: John likes peanuts.

    1. ~Food(x) | Likes(John, x)    
    Given

    2. Eats(Bill, peanuts) & Alive(Bill)
    Given

    3. Eats(Bill, peanuts)
    Simplification(2)

    4. ~Eats(F(y), y) | Kills(y, F(y)) | Food(y)
    Given

    5. ~Eats(Bill, peanuts) | Kills(peanuts, Bill) | Food(peanuts)
    {y / peanuts, F(y) / Bill} 4

    6. Kills(peanuts, Bill) | Food(peanuts)
    Resolution(3, 5)

    7. Alive(Bill)
    Simplification(2)

    8. ~Kills(F(y), y) | ~Alive(y)
    Given

    9. ~Kills(peanuts, Bill) | ~Alive(Bill)
    {y / peanuts, F(y) / Bill} 8

    10. ~Kills(peanuts, Bill)
    Resolution(7, 9)

    11. Food(peanuts)
    Resolution(6, 10)

    12. ~Food(peanuts) | Likes(John, peanuts)
    {x \ peanuts} 1

    13. Likes(John, peanuts)
    Resolution(11, 12)

(d)

What food does Sue eat?

    1. Eats(Bill, peanuts) & Alive(Bill)
    Given

    2. Eats(Bill, peanuts)
    Simplification(1)

    3. ~Eats(Bill, x) | Eats(Sue, x)
    Given

    4. ~Eats(Bill, peanuts) | Eats(Sue, peanuts)
    {x / peanuts}, 3

    5. Eats(Sue, peanuts)
    Resolution(2, 4)

Therefore, Sue eats peanuts.

(e)

- If you don't eat you die.
    A(x) E(y) (~Eats(x, y) => Die(x))
    A(x) (~Eats(x, y) => Die(x))
    Eats(x, G(x)) | Die(x)

- If you die, you are not alive.
    A(x) (Die(x) => ~Alive(x))
    ~Die(x) | ~Alive(x)

- Bill is alive.
    Alive(Bill)

1. ~Die(x) | ~Alive(x)
Given

2. ~Die(Bill) | ~Alive(Bill)                    
{x / Bill}

3. Alive(Bill)
Given

4. ~Die(Bill)
Resolution(2, 3)

5. Eats(x, G(x)) | Die(x)
Given

6. Eats(Bill, G(Bill)) | Die(Bill)
{x / Bill}

7. Eats(Bill, G(Bill))
Resolution(4, 6)

8. ~Eats(Bill, x) | Eats(Sue, x)
Given

9. Eats(Sue, G(Bill))
Resolution(7, 8)


Responses to the Questions on Last Page
=====

Then, download the RSat SAT solver from (http://reasoning.cs.ucla.edu/rsat/).
Read the manual carefully. Use RSat to solve the SAT instance obtained above. Is
the instance satisfiable? 

- No 

Do the conversion again, this time, with 4 colors. Use RSat to solve this new SAT
instance. Is the instance satisfiable? 

- Yes

What do the answers of these two SAT instances tell you about the graph
coloring problem of the above graph? Can you give a solution (a coloring) to
the graph coloring problem of the above graph based on the results of RSat? 

- The above graph requires at least 4 possible colors to yield a possible solution.
  A solution to the above graph is as follows:

  1 - Red
  2 - Blue
  3 - Red
  4 - Blue
  5 - Green
  6 - Yellow
  7 - Green 

Now, use a similar approach to solve the graph coloring of the graph described in
graph2.txt. What is the minimum number of colors required to properly color
this graph?

- 8